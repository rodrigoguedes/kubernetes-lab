# Command used to docker-for-desktop
kubectl get nodes
kubectl config get-contexts
kubectl config use-context docker-for-desktop
kubectl get nodes
kubectl run hello-kubernetes --image=k8s.gcr.io/echoserver:1.10 --port=8080
kubectl expose deployment hello-kubernetes --type=NodePort
kubectl get services hello-kubernetes
curl http://localhost:30257  (8080:30257 got from previous step)

#Useful Commands
kubectl expose pod <pod> --port=444 --name=frontend   -> Expose the port of a pod (creates a new service)
kubectl port-forward <pod> 8080                       -> port forward the exposed pod port to your local machine
kubectl attach <podname> -i                           -> Attach to the pod
kubectl exec <pod> -- command                          -> Execute a command on the pod
kubectl labels pods <pod> mylabel=awesome             -> Add a new label to a pod
kubectl run -i --tty busybox --image=busybox --restart=Never -- sh -> Run a shell in a pod - very useful for debuggin

# Create the pod on kubernetes
kubectl create -f pod-hello.yml
kubectl get pod
kubectl describe pod nodekuberneteshello.example.com
kubectl port-forward nodekuberneteshello.example.com 8081:3000
curl localhost:8081
kubectl expose pod nodekuberneteshello.example.com --type=NodePort --name kuberneteshello-service
kubectl get service
kubectl attach nodekuberneteshello.example.com -i  -> to see the logs of pod
kubectl exec nodekuberneteshello.example.com -- ls /app -> list all files that are inside of app folder
kubectl describe service kuberneteshello-service
#use busybox to connect on cluster and execute a GET HTTP Request
kubectl run -i --tty busybox --image=busybox --restart=Never -- sh

